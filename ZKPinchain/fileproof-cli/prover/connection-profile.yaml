#
# Copyright SecureKey Technologies Inc. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#
#
# The network connection profile provides client applications the information about the target
# blockchain network that are necessary for the applications to interact with it. These are all
# knowledge that must be acquired from out-of-band sources. This file provides such a source.
#

name: "nmiblocknet_default"

description: "Sample network contains 2 peers (1 orgs), 1 orderer and 2 cas for Python SDK testing"

#x-type: "h1fv1"

#
# Schema version of the content. Used by the SDK to apply the corresponding parsing rules.
#
version: 0.1

#
# The client section used by GO SDK.
#
client:

  # Which organization does this application instance belong to? The value must be the name of an org
  # defined under "organizations"
  organization: ptb.de

  logging:
    level: info

  # Root of the MSP directories with keys and certs.
  cryptoconfig:
    #path: ${FABRIC_SDK_GO_PROJECT_PATH}/${CRYPTOCONFIG_FIXTURES_PATH}
    path: ${HOME}/nmiblocknet/crypto-config

  # Some SDKs support pluggable KV stores, the properties under "credentialStore"
  # are implementation specific
  credentialStore:
    # [Optional]. Used by user store. Not needed if all credentials are embedded in configuration
    # and enrollments are performed elswhere.
    path: "/tmp/hfc-kvs"

    # [Optional]. Specific to the CryptoSuite implementation used by GO SDK. Software-based implementations
    # requiring a key store. PKCS#11 based implementations does not.
    cryptoStore:
      # Specific to the underlying KeyValueStore that backs the crypto key store.
      path: /tmp/hfc-cvs

  # BCCSP config for the client. Used by GO SDK.
  BCCSP:
    security:
     enabled: true
     default:
      provider: "SW"
     hashAlgorithm: "SHA2"
     softVerify: true
     level: 256

  tlsCerts:
    # [Optional]. Use system certificate pool when connecting to peers, orderers (for negotiating TLS) Default: false
    systemCertPool: false

    #[Optional]. Client key and cert for TLS handshake with peers and orderers
    client:
      keyfile:
      #path: ${FABRIC_SDK_GO_PROJECT_PATH}/pkg/core/config/testdata/certs/client_sdk_go-key.pem
      certfile:
      #path: ${FABRIC_SDK_GO_PROJECT_PATH}/pkg/core/config/testdata/certs/client_sdk_go.pem

#
# [Optional]. But most apps would have this section so that channel objects can be constructed
# based on the content below. If an app is creating channels, then it likely will not need this
# section.
#
channels:
  # name of the channel
  nmi-channel:
    # Required. list of orderers designated by the application to use for transactions on this
    # channel. This list can be a result of access control ("org1" can only access "ordererA"), or
    # operational decisions to share loads from applications among the orderers.  The values must
    # be "names" of orgs defined under "organizations/peers"
    #orderers:
    #  - raft1.orderer.nmi

    # Required. list of peers from participating orgs
    peers:
      peer0.ptb.de:
        # [Optional]. will this peer be sent transaction proposals for endorsement? The peer must
        # have the chaincode installed. The app can also use this property to decide which peers
        # to send the chaincode install request. Default: true
        endorsingPeer: true

        # [Optional]. will this peer be sent query proposals? The peer must have the chaincode
        # installed. The app can also use this property to decide which peers to send the
        # chaincode install request. Default: true
        chaincodeQuery: true

        # [Optional]. will this peer be sent query proposals that do not require chaincodes, like
        # queryBlock(), queryTransaction(), etc. Default: true
        ledgerQuery: true

        # [Optional]. will this peer be the target of the SDK's listener registration? All peers can
        # produce events but the app typically only needs to connect to one to listen to events.
        # Default: true
        eventSource: true

#
# list of participating organizations in this network
#
organizations:
  # the profile will contain public information about organizations other than the one it belongs to.
  # These are necessary information to make transaction lifecycles work, including MSP IDs and
  # peers with a public URL to send transaction proposals. The file will not contain private
  # information reserved for members of the organization, such as admin key and certificate,
  # fabric-ca registrar enroll ID and secret, etc.

  # Orderer Org name
  raft1.orderer.nmi:
      # Membership Service Provider ID for this organization
      mspID: OrdererMSP

      # Needed to load users crypto keys and certs for this org (absolute path or relative to global crypto path, DEV mode)
      cryptoPath: ordererOrganizations/orderer.nmi/users/{username}@orderer.nmi/msp

  # the profile will contain public information about organizations other than the one it belongs to.
  # These are necessary information to make transaction lifecycles work, including MSP IDs and
  # peers with a public URL to send transaction proposals. The file will not contain private
  # information reserved for members of the organization, such as admin key and certificate,
  # fabric-ca registrar enroll ID and secret, etc.
  ptb.de:
    mspid: PTBMSP

    # This org's MSP store (absolute path or relative to client.cryptoconfig)
    cryptoPath:  peerOrganizations/ptb.de/users/{username}@ptb.de/msp

    peers:
      - peer0.ptb.de
      - peer1.ptb.de

    users:
      Admin:
        key:
          path: ${HOME}/nmiblocknet/crypto-config/peerOrganizations/ptb.de/users/Admin@ptb.de/msp/keystore/dc01785146e43e1682a5b5fa4e2d74317083478ea4899b76d3adb479f1f9d0e3_sk
        cert: 
          path: ${HOME}/nmiblocknet/crypto-config/peerOrganizations/ptb.de/users/Admin@ptb.de/msp/signcerts/Admin@ptb.de-cert.pem
         
#
# List of orderers to send transaction and channel create/update requests to. For the time
# being only one orderer is needed. If more than one is defined, which one get used by the
# SDK is implementation specific. Consult each SDK's documentation for its handling of orderers.
#
orderers:
  raft1.orderer.nmi:
    # [Optional] Default: Infer from hostname
    #url: orderer.example.com:7050
    url: 192.168.15.19:7050

    # these are standard properties defined by the gRPC library
    # they will be passed in as-is to gRPC client constructor
    #TODO to be moved to high level, common for all grpc connections
    grpcOptions:
      ssl-target-name-override: raft1.orderer.nmi
      #These parameters should be set in coordination with the keepalive policy on the server,
      #as incompatible settings can result in closing of connection.
      #When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      #will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false

    tlsCACerts:
      # Certificate location absolute path
      #path: ${FABRIC_SDK_GO_PROJECT_PATH}/${CRYPTOCONFIG_FIXTURES_PATH}/ordererOrganizations/ptb.de/tlsca/tlsca.ptb.de-cert.pem
      path: ${HOME}/nmiblocknet/crypto-config/ordererOrganizations/orderer.nmi/tlsca/tlsca.orderer.nmi-cert.pem

#
# List of peers to send various requests to, including endorsement, query
# and event listener registration.
#
peers:
  peer0.ptb.de:
    # this URL is used to send endorsement and query requests
    # [Optional] Default: Infer from hostname
    #url: peer0.org1.example.com:7051
    url: 192.168.15.19:7051

    #TODO to be moved to high level, common for all grpc connections
    grpcOptions:
      #These parameters should be set in coordination with the keepalive policy on the server,
      #as incompatible settings can result in closing of connection.
      #When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      ssl-target-name-override: peer0.ptb.de      
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      #will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false

    tlsCACerts:
      # Certificate location absolute path
      path: ${HOME}/nmiblocknet/crypto-config/peerOrganizations/ptb.de/tlsca/tlsca.ptb.de-cert.pem

  peer1.ptb.de:
    url: 192.168.15.19:8051
    #TODO to be moved to high level, common for all grpc connections
    grpcOptions:
      ssl-target-name-override: peer1.ptb.de
      #These parameters should be set in coordination with the keepalive policy on the server,
      #as incompatible settings can result in closing of connection.      
      #When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      #will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false

    tlsCACerts:
      path: ${HOME}/nmiblocknet/crypto-config/peerOrganizations/ptb.de/tlsca/tlsca.ptb.de-cert.pem


entityMatchers:
  peer:
    - pattern: (\w*)peer0.ptb.de(\w*)
      urlSubstitutionExp: 192.168.15.19:7051
      eventUrlSubstitutionExp: 192.168.15.19:7053
      sslTargetOverrideUrlSubstitutionExp: peer0.ptb.de
      mappedHost: peer0.ptb.de

    - pattern: (\w*)peer1.ptb.de(\w*)
      urlSubstitutionExp: 192.168.15.19:8051
      eventUrlSubstitutionExp: 192.168.15.19:8053
      sslTargetOverrideUrlSubstitutionExp: peer1.ptb.de
      mappedHost: peer1.ptb.de

  orderer:
    - pattern: (\w*)solo.orderer.nmi(\w*)
      urlSubstitutionExp: 192.168.15.19:7050
      sslTargetOverrideUrlSubstitutionExp: solo.orderer.nmi
      mappedHost: solo.orderer.nmi

# ###############################################################################
# #
# #    Operations section
# #    copied from Fabric's core.yaml
# ###############################################################################
# operations:
#   # host and port for the operations server
#   listenAddress: 127.0.0.1:8080

#   # TLS configuration for the operations endpoint
#   tls:
#     # TLS enabled
#     enabled: false

#     # path to PEM encoded server certificate for the operations server
#     cert:
#       file:

#     # path to PEM encoded server key for the operations server
#     key:
#       file:

#     # require client certificate authentication to access all resources
#     clientAuthRequired: false

#     # paths to PEM encoded ca certificates to trust for client authentication
#     clientRootCAs:
#       files: []

# ###############################################################################
# #
# #    Metrics section
# #    copied from Fabric's core.yaml
# ###############################################################################
# metrics:
#   # metrics provider is one of statsd, prometheus, or disabled
#   provider: prometheus

#   # statsd configuration
#   statsd:
#     # network type: tcp or udp
#     network: udp

#     # statsd server address
#     address: 127.0.0.1:8125

#     # the interval at which locally cached counters and gauges are pushed
#     # to statsd; timings are pushed immediately
#     writeInterval: 10s

#     # prefix is prepended to all emitted statsd metrics
#     prefix: